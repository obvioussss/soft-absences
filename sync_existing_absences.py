#!/usr/bin/env python3
"""
Script pour synchroniser les absences existantes avec Google Calendar
Ce script doit √™tre ex√©cut√© une seule fois apr√®s l'installation de la fonctionnalit√© Google Calendar
"""
import os
import sys
from datetime import datetime

# Ajouter le r√©pertoire racine au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import SessionLocal, engine
from app import models
from app.google_calendar_service import google_calendar_service

def sync_existing_absences():
    """Synchronise toutes les absences existantes avec Google Calendar"""
    
    if not google_calendar_service.is_configured():
        print("‚ùå Service Google Calendar non configur√©. Veuillez configurer les variables d'environnement :")
        print("   - GOOGLE_CALENDAR_CREDENTIALS")
        print("   - GOOGLE_CALENDAR_ID")
        return False
    
    print("üîÑ Synchronisation des absences existantes avec Google Calendar...")
    
    db = SessionLocal()
    try:
        # Synchroniser les demandes d'absence
        absence_requests = db.query(models.AbsenceRequest).filter(
            models.AbsenceRequest.google_calendar_event_id.is_(None)
        ).all()
        
        print(f"üìã Trouv√© {len(absence_requests)} demandes d'absence √† synchroniser")
        
        synced_absences = 0
        for request in absence_requests:
            try:
                event_id = google_calendar_service.create_event(request)
                if event_id:
                    request.google_calendar_event_id = event_id
                    synced_absences += 1
                    print(f"  ‚úÖ Absence #{request.id} synchronis√©e (√©v√©nement: {event_id})")
                else:
                    print(f"  ‚ùå √âchec synchronisation absence #{request.id}")
            except Exception as e:
                print(f"  ‚ùå Erreur absence #{request.id}: {e}")
        
        # Synchroniser les d√©clarations de maladie
        sickness_declarations = db.query(models.SicknessDeclaration).filter(
            models.SicknessDeclaration.google_calendar_event_id.is_(None)
        ).all()
        
        print(f"üìã Trouv√© {len(sickness_declarations)} d√©clarations de maladie √† synchroniser")
        
        synced_sickness = 0
        for declaration in sickness_declarations:
            try:
                event_id = google_calendar_service.create_sickness_event(declaration)
                if event_id:
                    declaration.google_calendar_event_id = event_id
                    synced_sickness += 1
                    print(f"  ‚úÖ D√©claration #{declaration.id} synchronis√©e (√©v√©nement: {event_id})")
                else:
                    print(f"  ‚ùå √âchec synchronisation d√©claration #{declaration.id}")
            except Exception as e:
                print(f"  ‚ùå Erreur d√©claration #{declaration.id}: {e}")
        
        # Sauvegarder les changements
        db.commit()
        
        print(f"\nüéâ Synchronisation termin√©e !")
        print(f"   - Absences synchronis√©es : {synced_absences}/{len(absence_requests)}")
        print(f"   - D√©clarations synchronis√©es : {synced_sickness}/{len(sickness_declarations)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la synchronisation : {e}")
        db.rollback()
        return False
    finally:
        db.close()

def main():
    """Point d'entr√©e du script"""
    print("üöÄ Script de synchronisation Google Calendar")
    print("=" * 50)
    
    # V√©rifier les variables d'environnement
    if not os.getenv('GOOGLE_CALENDAR_CREDENTIALS'):
        print("‚ùå Variable GOOGLE_CALENDAR_CREDENTIALS non d√©finie")
        print("   Ajoutez cette variable √† votre fichier .env ou .env.production")
        return
    
    if not os.getenv('GOOGLE_CALENDAR_ID'):
        print("‚ùå Variable GOOGLE_CALENDAR_ID non d√©finie")
        print("   Ajoutez cette variable √† votre fichier .env ou .env.production")
        return
    
    # Effectuer la synchronisation
    success = sync_existing_absences()
    
    if success:
        print("\n‚úÖ Synchronisation r√©ussie ! Toutes les absences sont maintenant visibles dans Google Calendar.")
    else:
        print("\n‚ùå La synchronisation a √©chou√©. V√©rifiez les logs ci-dessus pour plus de d√©tails.")

if __name__ == "__main__":
    main()