#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'envoi d'emails √† tous les utilisateurs
"""

import os
import sys
from datetime import date, timedelta
from dotenv import load_dotenv

# Ajouter le r√©pertoire courant au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import get_db
from app.models import User, UserRole, AbsenceType, AbsenceStatus
from app.email_service import email_service

load_dotenv()

def test_email_to_all_users():
    """Test l'envoi d'emails √† tous les utilisateurs"""
    
    print("=== Test d'envoi d'emails √† tous les utilisateurs ===")
    
    # Obtenir une session de base de donn√©es
    db = next(get_db())
    
    try:
        # R√©cup√©rer tous les utilisateurs
        all_users = db.query(User).all()
        
        print(f"Utilisateurs trouv√©s: {len(all_users)}")
        
        for user in all_users:
            print(f"  - {user.email} ({user.role.value})")
        
        if not all_users:
            print("‚ùå Aucun utilisateur trouv√© dans la base de donn√©es")
            return
        
        # Tester l'envoi √† chaque utilisateur
        for user in all_users:
            print(f"\n--- Test pour {user.email} ---")
            
            user_name = f"{user.first_name} {user.last_name}"
            
            if user.role == UserRole.ADMIN:
                # Test notification admin
                print("Envoi notification admin...")
                success = email_service.send_absence_request_notification(
                    admin_emails=[user.email],
                    user_name="Pierre Test",
                    absence_type="vacances",
                    start_date=str(date.today() + timedelta(days=1)),
                    end_date=str(date.today() + timedelta(days=5)),
                    reason="Test notification admin"
                )
            else:
                # Test notification utilisateur
                print("Envoi notification utilisateur...")
                success = email_service.send_absence_status_notification(
                    user_email=user.email,
                    user_name=user_name,
                    absence_type="vacances",
                    status="approuve",
                    admin_comment="Test notification utilisateur"
                )
            
            if success:
                print(f"‚úÖ Email envoy√© avec succ√®s √† {user.email}")
            else:
                print(f"‚ùå √âchec de l'envoi √† {user.email}")
                
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
    finally:
        db.close()

def test_specific_user():
    """Test sp√©cifique pour Pierre"""
    
    print("\n=== Test sp√©cifique pour Pierre ===")
    
    # Obtenir une session de base de donn√©es
    db = next(get_db())
    
    try:
        # Chercher Pierre
        pierre = db.query(User).filter(User.email == "fautrel.pierre@gmail.com").first()
        
        if not pierre:
            print("‚ùå Pierre (fautrel.pierre@gmail.com) non trouv√©")
            return
        
        print(f"Pierre trouv√©: {pierre.first_name} {pierre.last_name}")
        
        # Test notification de statut
        user_name = f"{pierre.first_name} {pierre.last_name}"
        
        print("Envoi notification de confirmation d'approbation...")
        success = email_service.send_absence_status_notification(
            user_email=pierre.email,
            user_name=user_name,
            absence_type="vacances",
            status="approuve",
            admin_comment="Votre demande de vacances a √©t√© approuv√©e !"
        )
        
        if success:
            print(f"‚úÖ Email de confirmation envoy√© √† Pierre ({pierre.email})")
            print("Pierre devrait recevoir une notification de confirmation")
        else:
            print(f"‚ùå √âchec de l'envoi √† Pierre ({pierre.email})")
            print("V√©rifiez la configuration email (Gmail SMTP recommand√©)")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    print("Configuration email actuelle:")
    print(f"RESEND_API_KEY: {'Configur√©' if os.getenv('RESEND_API_KEY') else 'Non configur√©'}")
    print(f"SMTP_USERNAME: {'Configur√©' if os.getenv('SMTP_USERNAME') else 'Non configur√©'}")
    print()
    
    if os.getenv('SMTP_USERNAME'):
        print("‚úÖ Configuration Gmail SMTP d√©tect√©e")
        print("   Tous les utilisateurs peuvent recevoir des emails")
    elif os.getenv('RESEND_API_KEY'):
        print("‚ö†Ô∏è  Configuration Resend d√©tect√©e")
        print("   Seul hello.obvious@gmail.com peut recevoir des emails")
        print("   Consultez GMAIL_SMTP_SETUP.md pour la configuration Gmail")
    else:
        print("‚ùå Aucune configuration email d√©tect√©e")
        print("   Consultez GMAIL_SMTP_SETUP.md pour la configuration")
    
    print()
    
    test_specific_user()
    test_email_to_all_users()
    
    print("\n=== Test termin√© ===")
    print("\nüìß Prochaines √©tapes:")
    print("1. Si vous utilisez Resend, configurez Gmail SMTP temporairement")
    print("2. V√©rifiez les bo√Ætes de r√©ception des utilisateurs")
    print("3. Testez une vraie demande d'absence dans l'application") 